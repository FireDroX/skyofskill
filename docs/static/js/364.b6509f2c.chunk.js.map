{"version":3,"file":"static/js/364.b6509f2c.chunk.js","mappings":"qMAMA,MAyIA,EAzI6BA,KAC3B,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,CACzC,QACA,kBACA,WA+DF,OAjBAG,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAaC,SAASC,iBAC1B,uCAEFF,EAAWG,SAASC,IAClBA,EAASC,iBAAiB,UAAU,WAC9BC,KAAKC,SACPP,EAAWG,SAASK,IACdA,IAAOF,OACTE,EAAGD,SAAU,EACf,GAGN,GAAE,GACF,GACD,KAGDE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOC,MAAO,CAAEC,MAAO,iBAAkBH,SAAC,sCAG1CC,EAAAA,EAAAA,KAAA,SACEG,KAAK,kCACLC,KAAK,OACLC,MAAOvB,EACPwB,SAAWC,GAnEMA,IAAMxB,EAAQwB,EAAEC,OAAOH,OAmEvBI,CAAkBF,SAGvCV,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,UAAQU,QA/DEC,KAChB,GAAa,KAAT7B,EAAa,OAEjB,MAOMM,EAAa,IANMC,SAASC,iBAChC,0CAEuBD,SAASC,iBAChC,wCAE4DsB,QAC3DpB,GAAaA,EAASG,UAGnBkB,EAAUC,MAAMC,KAAK,CAACjC,IAC5BM,EAAW4B,aAAaC,KAAIC,IAAa,IAAZ,GAAEC,GAAID,EASjC,MAPE,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKE,SAASD,IACHE,OAAhCR,EAAQA,EAAQS,OAAS,IAEzBT,EAAQU,KAAKF,MAEfR,EAAQW,QAnBK,IAmBYL,IAElB,CAAI,IAGbjC,EAAa,IAAID,EAAW4B,EAAQY,KAAK,MACzC1C,EAAQ,GAAG,EAmCsBgB,SAAC,aAC5BC,EAAAA,EAAAA,KAAA,UAAQU,QA5EGgB,KACjBC,UAAUC,UAAUC,UAAU,IAAI5C,GAAWwC,KAAK,IAAI,EA2EpB1B,SAAC,aAE/BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,SAAAD,SACG,IAAId,GAAWgC,KAAI,CAACV,EAAGuB,KACtB9B,EAAAA,EAAAA,KAAC+B,EAAAA,GAAgB,CAACjD,KAAMyB,GAAQuB,QAGpC9B,EAAAA,EAAAA,KAAA,SAAOF,UAAU,WAAUC,SAAE,IAAId,GAAWwC,KAAK,aAGrD5B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,cACxCE,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,kBACxCE,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,mBACxCE,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,kBACxCE,EAAAA,EAAAA,KAAA,SACEI,KAAK,WACLe,GAAG,IACHrB,UAAU,cACVkC,gBAAgB,KAElBhC,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,oBACxCE,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,aACxCE,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,aACxCE,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,kBACxCE,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,aACxCE,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,cACxCE,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,aACxCE,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,YACxCE,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,qBACxCE,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,eACxCE,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,iBAE1CD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,aACxCE,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,sBACxCE,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,kBACxCE,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,eACxCE,EAAAA,EAAAA,KAAA,SAAOI,KAAK,WAAWe,GAAG,IAAIrB,UAAU,sBAE1CD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,UAAQU,QAhHIuB,KAClBlD,EAAQ,IACRG,EAAa,GAAG,EA8GmBa,SAAC,WAC9BC,EAAAA,EAAAA,KAAA,UAAQU,QAnHKwB,IAAMhD,EAAa,IAAID,EAAUkD,MAAM,GAAI,KAmH1BpC,UAC5BC,EAAAA,EAAAA,KAACoC,EAAAA,IAAe,cAIlB,ECrCV,EAlGqBC,KACnB,MAAMC,EAAa,CACjB,CACE,UACA,UACA,MACA,UACA,UACA,WACA,WACA,UACA,eACA,UACA,gBACA,UACA,UACA,MACA,UACA,WAEF,CACE,UACA,UACA,WACA,WACA,WACA,UACA,UACA,8DACA,UACA,UACA,WACA,WACA,WACA,UACA,WAEF,CACE,UACA,UACA,WACA,UACA,UACA,WACA,UACA,UACA,UACA,YACA,UACA,UACA,UACA,WACA,UACA,UACA,WACA,UACA,WAEF,CACE,UACA,UACA,WACA,WACA,WACA,UACA,UACA,qCACA,UACA,UACA,WACA,WACA,WACA,UACA,YASJ,OACEzC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQC,SAAA,EACrBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uBACHuC,EAAWrB,KAAI,CAACsB,EAAOC,KACtBxC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UACxBC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,eAAeY,QAASA,IAV7BoB,KAClB,MAAMhD,EAAOwD,EAAWR,GAAGL,KAAK,IAChCE,UAAUC,UAAUC,UAAU/C,EAAK,EAQkB4C,CAAWc,GAAOzC,SAC9DwC,EAAMtB,KAAI,CAACwB,EAAGX,KACb9B,EAAAA,EAAAA,KAAC+B,EAAAA,GAAgB,CAACjD,KAAM2D,GAAQX,QAHNU,OAQ9B,EClFV,EAXeE,KAEX1C,EAAAA,EAAAA,KAAA,WAASF,UAAU,MAAKC,UACtBF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAACnB,EAAoB,KACrBmB,EAAAA,EAAAA,KAACqC,EAAY,Q,oFCVd,MAAMM,EAAgB,WAAsB,IAArBC,EAAMC,UAAAvB,OAAA,QAAAwB,IAAAD,UAAA,GAAAA,UAAA,GAAGE,OAErC,IAAIC,EAAYC,KAAKC,OAAO,GAAKN,GAAQtB,OAAS,GAE9C6B,EAAaC,YACA,IAAdJ,EAAkBJ,EAASK,KAAKI,IAAI,IAAML,GAAaJ,GAAQU,YAC9D,IAaJ,OATIH,EAAa,IAAM,GAAOA,EAAa,GAAKH,EAAY,IAC1DG,EAAaA,EAAWI,QAAQ,IAE9BJ,EAAa,GAAKH,EAAY,IAChCG,EAAaA,EAAWI,QAAQ,GAChCJ,GAAc,IACdH,KAGKG,EAlBU,CAAC,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,MAkBlBH,EAC/B,EAEaQ,EAAyB,WACpC,MAAMC,GADqCZ,UAAAvB,OAAA,QAAAwB,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAClBa,WACtBC,EAAS,GACf,IAAK,IAAI7B,EAAI2B,EAAanC,OAAQQ,EAAI,EAAGA,GAAK,EAC5C6B,EAAOnC,QAAQiC,EAAaG,UAAUX,KAAKY,IAAI,EAAG/B,EAAI,GAAIA,IAM5D,OAAO6B,EAAOlC,KAAK,IACrB,EAEaM,EAAmBb,IAAoB,IAAnB,KAAEpC,EAAO,IAAIoC,EAC5C,MAAM4C,EAAQhD,MAAMC,KAAKjC,EAAKgF,MAAM,WAAWlD,OAAOmD,UACtD,IAAIlD,EAAU,GACVmD,GAAiB,EACrB,MAAMC,EAAgBnD,MAAMC,KAC1B+C,EAAM7C,KAAKiD,IACT,OAAQA,GACN,IAAK,KACH,MAAO,cAET,IAAK,KACH,MAAO,kBAET,IAAK,KACH,MAAO,mBAET,IAAK,KACH,MAAO,kBAET,IAAK,KACH,MAAO,iBAET,IAAK,KACH,MAAO,oBAET,IAAK,KACH,MAAO,aAET,IAAK,KACH,MAAO,aAET,IAAK,KACH,MAAO,kBAET,IAAK,KACH,MAAO,aAET,IAAK,KACH,MAAO,cAET,IAAK,KACH,MAAO,aAET,IAAK,KACH,MAAO,YAET,IAAK,KACH,MAAO,qBAET,IAAK,KACH,MAAO,eAET,IAAK,KACH,MAAO,cAET,IAAK,KACH,MAAO,aAET,IAAK,KACH,MAAO,sBAET,IAAK,KACH,MAAO,kBAET,IAAK,KACH,MAAO,eAET,IAAK,KAEH,OADAF,GAAiB,EACV,gBAET,IAAK,KAEH,OADAA,GAAiB,EACV,GAET,QAEE,OADAnD,EAAUmD,EAAiB,GAAKE,EACzBrD,EACX,KAIJ,OACEb,EAAAA,EAAAA,KAAA,QAAMF,UAAWmE,EAAcxC,KAAK,KAAK0C,OAAOpE,SAC7Cc,GADmDoD,EAAc3C,OAE7D,EAIE8C,EAAgB,WAAsB,IAArBxB,EAAMC,UAAAvB,OAAA,QAAAwB,IAAAD,UAAA,GAAAA,UAAA,GAAGE,OACrC,MAAMsB,EAAS,CACb,UACA,aACA,OACA,QACA,MACA,OACA,UACA,UACA,YACA,UACA,WACA,eAEF,OAAIzB,GAAU,GAAKA,GAAU,GAAWyB,EAAOzB,EAAS,GAC5CyB,EAAO,EACrB,EAEaC,EAAqBC,IAChC,GAAI,MAACzB,EAAW,IAAI1B,SAASmD,GAAc,MAAO,CAAC,IAAK,KACxD,MAAMC,EAAgBD,EAAYE,MAAM,qBACxC,OAAOD,EAAgBA,EAAcvD,KAAKyD,GAAQA,EAAId,UAAU,EAAG,KAAM,EAAE,C","sources":["components/MinecraftColoredText/MinecraftColoredText.jsx","components/ExampleTexts/ExampleTexts.jsx","pages/colors/Colors.jsx","utils/functions.jsx"],"sourcesContent":["import \"./MinecraftColoredText.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { IoIosReturnLeft } from \"react-icons/io\";\r\n\r\nimport { ConvertFinalText } from \"../../utils/functions\";\r\n\r\nconst MinecraftColoredText = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const [finalText, setFinalText] = useState([\r\n    \"&6&l?\",\r\n    \"&e&l LuckyBlock\",\r\n    \"&6&l ?\",\r\n  ]);\r\n\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText([...finalText].join(\"\"));\r\n  };\r\n\r\n  const handleInputChange = (e) => setText(e.target.value);\r\n  const handleReturn = () => setFinalText([...finalText.slice(0, -1)]);\r\n\r\n  const handleReset = () => {\r\n    setText(\"\");\r\n    setFinalText([]);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    if (text === \"\") return;\r\n\r\n    const prefix = \"&\";\r\n    const checkboxesColors = document.querySelectorAll(\r\n      '.btns-colors input[type=\"checkbox\"]'\r\n    );\r\n    const checkboxesFormat = document.querySelectorAll(\r\n      '.btns-format input[type=\"checkbox\"]'\r\n    );\r\n    const checkboxes = [...checkboxesColors, ...checkboxesFormat].filter(\r\n      (checkbox) => checkbox.checked\r\n    );\r\n\r\n    const newText = Array.from([text]);\r\n    checkboxes.toReversed().map(({ id }) => {\r\n      if (\r\n        [\"l\", \"m\", \"n\", \"o\", \"k\"].includes(id) &&\r\n        newText[newText.length - 1] !== prefix + \"r\"\r\n      ) {\r\n        newText.push(prefix + \"r\");\r\n      }\r\n      newText.unshift(prefix + id);\r\n\r\n      return true;\r\n    });\r\n\r\n    setFinalText([...finalText, newText.join(\"\")]);\r\n    setText(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    const checkboxes = document.querySelectorAll(\r\n      '.btns-colors input[type=\"checkbox\"]'\r\n    );\r\n    checkboxes.forEach((checkbox) => {\r\n      checkbox.addEventListener(\"change\", function () {\r\n        if (this.checked) {\r\n          checkboxes.forEach((cb) => {\r\n            if (cb !== this) {\r\n              cb.checked = false;\r\n            }\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"minecraft-colors\">\r\n      <div className=\"minecraft-txt\">\r\n        <div>\r\n          <small style={{ color: \"var(--text85)\" }}>\r\n            Mot ou Caractère à ajouter\r\n          </small>\r\n          <input\r\n            name=\"Mot / Caractère à ajouter\"\r\n            type=\"text\"\r\n            value={text}\r\n            onChange={(e) => handleInputChange(e)}\r\n          />\r\n        </div>\r\n        <div className=\"btns-selector\">\r\n          <button onClick={handleAdd}>Ajouter</button>\r\n          <button onClick={handleCopy}>Copy</button>\r\n        </div>\r\n        <div className=\"final-txt\">\r\n          <small>\r\n            {[...finalText].map((e, i) => (\r\n              <ConvertFinalText text={e} key={i} />\r\n            ))}\r\n          </small>\r\n          <small className=\"txt-copy\">{[...finalText].join(\"\")}</small>\r\n        </div>\r\n      </div>\r\n      <div className=\"minecraft-btns\">\r\n        <div className=\"btns-colors\">\r\n          <input type=\"checkbox\" id=\"0\" className=\"mc-black\" />\r\n          <input type=\"checkbox\" id=\"1\" className=\"mc-dark_blue\" />\r\n          <input type=\"checkbox\" id=\"2\" className=\"mc-dark_green\" />\r\n          <input type=\"checkbox\" id=\"3\" className=\"mc-dark_aqua\" />\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"4\"\r\n            className=\"mc-dark_red\"\r\n            defaultChecked={true}\r\n          />\r\n          <input type=\"checkbox\" id=\"5\" className=\"mc-dark_purple\" />\r\n          <input type=\"checkbox\" id=\"6\" className=\"mc-gold\" />\r\n          <input type=\"checkbox\" id=\"7\" className=\"mc-gray\" />\r\n          <input type=\"checkbox\" id=\"8\" className=\"mc-dark_gray\" />\r\n          <input type=\"checkbox\" id=\"9\" className=\"mc-blue\" />\r\n          <input type=\"checkbox\" id=\"a\" className=\"mc-green\" />\r\n          <input type=\"checkbox\" id=\"b\" className=\"mc-aqua\" />\r\n          <input type=\"checkbox\" id=\"c\" className=\"mc-red\" />\r\n          <input type=\"checkbox\" id=\"d\" className=\"mc-light_purple\" />\r\n          <input type=\"checkbox\" id=\"e\" className=\"mc-yellow\" />\r\n          <input type=\"checkbox\" id=\"f\" className=\"mc-white\" />\r\n        </div>\r\n        <div className=\"btns-format\">\r\n          <input type=\"checkbox\" id=\"l\" className=\"mc-bold\" />\r\n          <input type=\"checkbox\" id=\"m\" className=\"mc-strikethrough\" />\r\n          <input type=\"checkbox\" id=\"n\" className=\"mc-underline\" />\r\n          <input type=\"checkbox\" id=\"o\" className=\"mc-italic\" />\r\n          <input type=\"checkbox\" id=\"k\" className=\"mc-obfuscated\" />\r\n        </div>\r\n        <div className=\"btns-settings\">\r\n          <button onClick={handleReset}>Reset</button>\r\n          <button onClick={handleReturn}>\r\n            <IoIosReturnLeft />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MinecraftColoredText;\r\n","import \"./ExampleTexts.css\";\r\n\r\nimport { ConvertFinalText } from \"../../utils/functions\";\r\n\r\nconst ExampleTexts = () => {\r\n  const textsArray = [\r\n    [\r\n      \"&7&kt&r\",\r\n      \"&f&kt&r\",\r\n      \"&e$\",\r\n      \"&f&kt&r\",\r\n      \"&7&kt&r\",\r\n      \"&6&l L&r\",\r\n      \"&e&la &r\",\r\n      \"&6&lF&r\",\r\n      \"&e&lraude &r\",\r\n      \"&6&lF&r\",\r\n      \"&e&liscale &r\",\r\n      \"&7&kt&r\",\r\n      \"&f&kt&r\",\r\n      \"&e$\",\r\n      \"&f&kt&r\",\r\n      \"&7&kt&r\",\r\n    ],\r\n    [\r\n      \"&b&kt&r\",\r\n      \"&f&kt&r\",\r\n      \"&9☛\",\r\n      \"&b❤\",\r\n      \"&9☚\",\r\n      \"&f&kt&r\",\r\n      \"&b&kt&r\",\r\n      \"&9  (╯°□°)╯︵ ┻━┻  \",\r\n      \"&b&kt&r\",\r\n      \"&f&kt&r\",\r\n      \"&9☛\",\r\n      \"&b❤\",\r\n      \"&9☚\",\r\n      \"&f&kt&r\",\r\n      \"&b&kt&r\",\r\n    ],\r\n    [\r\n      \"&4&kt&r\",\r\n      \"&c&kt&r\",\r\n      \"&f✯\",\r\n      \"&c&kt&r\",\r\n      \"&4&kt&r\",\r\n      \"&c&l S&r\",\r\n      \"&4&la&r\",\r\n      \"&c&lb&r\",\r\n      \"&4&lr&r\",\r\n      \"&c&le L&r\",\r\n      \"&4&la&r\",\r\n      \"&c&ls&r\",\r\n      \"&4&le&r\",\r\n      \"&c&lr &r\",\r\n      \"&4&kt&r\",\r\n      \"&c&kt&r\",\r\n      \"&f✯\",\r\n      \"&c&kt&r\",\r\n      \"&4&kt&r\",\r\n    ],\r\n    [\r\n      \"&7&kt&r\",\r\n      \"&f&kt&r\",\r\n      \"&d❰\",\r\n      \"&f⚔\",\r\n      \"&d❱\",\r\n      \"&f&kt&r\",\r\n      \"&7&kt&r\",\r\n      \"&d&l  天羽々斬  &r\",\r\n      \"&7&kt&r\",\r\n      \"&f&kt&r\",\r\n      \"&d❰\",\r\n      \"&f⚔\",\r\n      \"&d❱\",\r\n      \"&f&kt&r\",\r\n      \"&7&kt&r\",\r\n    ],\r\n  ];\r\n\r\n  const handleCopy = (i) => {\r\n    const text = textsArray[i].join(\"\");\r\n    navigator.clipboard.writeText(text);\r\n  };\r\n\r\n  return (\r\n    <div className=\"footer\">\r\n      <h6>Exemples de noms :</h6>\r\n      {textsArray.map((texts, index) => (\r\n        <div className=\"final-txt\" key={index}>\r\n          <small className=\"exemple-copy\" onClick={() => handleCopy(index)}>\r\n            {texts.map((t, i) => (\r\n              <ConvertFinalText text={t} key={i} />\r\n            ))}\r\n          </small>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExampleTexts;\r\n","import \"./Colors.css\";\r\n\r\nimport MinecraftColoredText from \"../../components/MinecraftColoredText/MinecraftColoredText\";\r\nimport ExampleTexts from \"../../components/ExampleTexts/ExampleTexts\";\r\n\r\nconst Colors = () => {\r\n  return (\r\n    <section className=\"App\">\r\n      <div>\r\n        <MinecraftColoredText />\r\n        <ExampleTexts />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Colors;\r\n","export const compactNumber = (number = Number) => {\r\n  const suffixes = [\"\", \"K\", \"M\", \"B\", \"T\", \"Q\", \"Qu\"];\r\n  let suffixNum = Math.floor((\"\" + number).length / 3);\r\n\r\n  let shortValue = parseFloat(\r\n    (suffixNum !== 0 ? number / Math.pow(1000, suffixNum) : number).toPrecision(\r\n      3\r\n    )\r\n  );\r\n\r\n  if (shortValue % 1 !== 0 && !(shortValue < 1 && suffixNum > 0))\r\n    shortValue = shortValue.toFixed(1);\r\n\r\n  if (shortValue < 1 && suffixNum > 0) {\r\n    shortValue = shortValue.toFixed(3);\r\n    shortValue *= 1000;\r\n    suffixNum--;\r\n  }\r\n\r\n  return shortValue + suffixes[suffixNum];\r\n};\r\n\r\nexport const formatNumberWithSpaces = (number = 0) => {\r\n  const numberString = number.toString();\r\n  const groups = [];\r\n  for (let i = numberString.length; i > 0; i -= 3) {\r\n    groups.unshift(numberString.substring(Math.max(0, i - 3), i));\r\n  }\r\n\r\n  // if (groups.length > 5) return \"That number is too big...\";\r\n  // else return groups.join(\" \");\r\n\r\n  return groups.join(\" \");\r\n};\r\n\r\nexport const ConvertFinalText = ({ text = \"\" }) => {\r\n  const split = Array.from(text.split(/([&].)/g).filter(Boolean));\r\n  let newText = \"\";\r\n  let obfuscatedText = false;\r\n  const replacedArray = Array.from(\r\n    split.map((item) => {\r\n      switch (item) {\r\n        case \"&0\":\r\n          return \"color-black\";\r\n\r\n        case \"&1\":\r\n          return \"color-dark_blue\";\r\n\r\n        case \"&2\":\r\n          return \"color-dark_green\";\r\n\r\n        case \"&3\":\r\n          return \"color-dark_aqua\";\r\n\r\n        case \"&4\":\r\n          return \"color-dark_red\";\r\n\r\n        case \"&5\":\r\n          return \"color-dark_purple\";\r\n\r\n        case \"&6\":\r\n          return \"color-gold\";\r\n\r\n        case \"&7\":\r\n          return \"color-gray\";\r\n\r\n        case \"&8\":\r\n          return \"color-dark_gray\";\r\n\r\n        case \"&9\":\r\n          return \"color-blue\";\r\n\r\n        case \"&a\":\r\n          return \"color-green\";\r\n\r\n        case \"&b\":\r\n          return \"color-aqua\";\r\n\r\n        case \"&c\":\r\n          return \"color-red\";\r\n\r\n        case \"&d\":\r\n          return \"color-light_purple\";\r\n\r\n        case \"&e\":\r\n          return \"color-yellow\";\r\n\r\n        case \"&f\":\r\n          return \"color-white\";\r\n\r\n        case \"&l\":\r\n          return \"color-bold\";\r\n\r\n        case \"&m\":\r\n          return \"color-strikethrough\";\r\n\r\n        case \"&n\":\r\n          return \"color-underline\";\r\n\r\n        case \"&o\":\r\n          return \"color-italic\";\r\n\r\n        case \"&k\":\r\n          obfuscatedText = true;\r\n          return \"mc-obfuscated\";\r\n\r\n        case \"&r\":\r\n          obfuscatedText = false;\r\n          return \"\";\r\n\r\n        default:\r\n          newText = obfuscatedText ? \"\" : item;\r\n          return newText;\r\n      }\r\n    })\r\n  );\r\n\r\n  return (\r\n    <span className={replacedArray.join(\" \").trim()} key={replacedArray.length}>\r\n      {newText}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport const numberToMonth = (number = Number) => {\r\n  const months = [\r\n    \"Janvier\",\r\n    \"Février\",\r\n    \"Mars\",\r\n    \"Avril\",\r\n    \"Mai\",\r\n    \"Juin\",\r\n    \"Juillet\",\r\n    \"Août\",\r\n    \"Septembre\",\r\n    \"Octobre\",\r\n    \"Novembre\",\r\n    \"Décembre\",\r\n  ];\r\n  if (number >= 1 && number <= 12) return months[number - 1];\r\n  else return months[0];\r\n};\r\n\r\nexport const findHexCharacters = (inputString) => {\r\n  if ([undefined, \"\"].includes(inputString)) return [\"4\", \"c\"];\r\n  const hexCharacters = inputString.match(/[0-9a-fA-F]{1,2}/g);\r\n  return hexCharacters ? hexCharacters.map((hex) => hex.substring(0, 2)) : [];\r\n};\r\n"],"names":["MinecraftColoredText","text","setText","useState","finalText","setFinalText","useEffect","checkboxes","document","querySelectorAll","forEach","checkbox","addEventListener","this","checked","cb","_jsxs","className","children","_jsx","style","color","name","type","value","onChange","e","target","handleInputChange","onClick","handleAdd","filter","newText","Array","from","toReversed","map","_ref","id","includes","prefix","length","push","unshift","join","handleCopy","navigator","clipboard","writeText","i","ConvertFinalText","defaultChecked","handleReset","handleReturn","slice","IoIosReturnLeft","ExampleTexts","textsArray","texts","index","t","Colors","compactNumber","number","arguments","undefined","Number","suffixNum","Math","floor","shortValue","parseFloat","pow","toPrecision","toFixed","formatNumberWithSpaces","numberString","toString","groups","substring","max","split","Boolean","obfuscatedText","replacedArray","item","trim","numberToMonth","months","findHexCharacters","inputString","hexCharacters","match","hex"],"sourceRoot":""}